import {Component, Inject, Input, LOCALE_ID} from '@angular/core';

/**
 * CurrencyComponent
 *
 * Purpose is to display a currency with the decimal part of the number wrapped in a <small> tag
 * This might be irrelevant because of the CurrencyPipe see https://github.com/angular/angular/blob/4.4.6/packages/common/src/pipes/number_pipe.ts#L126-L162
 * If you can find a more elegant solution, please reimplement
 */

@Component({
    selector: 'currency',
    template: `<ng-container *ngIf="numIn != null">{{intPart}}<small>{{decimalPart}}</small></ng-container>`
})
export class CurrencyComponent{

    public intPart: string;
    public decimalPart: string;

    public numIn:number;
    @Input() numDecimalPlaces: number = 2;
    @Input() currency: string = "USD";

    /**
     * @param {number} amount: the amount to be displayed
     * @ALG: formats (amount) into a currency style then splits it into a decimal part and an integer part
     *
     * the length of the decimal section of the formatted number will always equal
     * (numDecimalPlace). Because of this we can split the formatted string generated by parsing
     * amount in Numberformater (numDecimalPlaces) away from the end of the string
     */
    @Input("amount")
    set amount(amount:number){
        this.numIn = amount;
        let formatter = new Intl.NumberFormat(this._locale,{
            style:'currency',
            currency:this.currency,
            minimumFractionDigits:this.numDecimalPlaces,
            maximumFractionDigits:this.numDecimalPlaces
        });


        let curr : string = formatter.format(amount)
        this.decimalPart = curr.substr(curr.length-this.numDecimalPlaces,this.numDecimalPlaces);
        this.intPart = curr.substring(0,curr.length-this.numDecimalPlaces);
        if(amount > 0){
          this.intPart = "+" + this.intPart;
        }

    }

    //get Locale
    constructor(@Inject(LOCALE_ID) private _locale: string){    }

}
